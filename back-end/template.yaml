AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Use ChatGPT to generate your workouts and have them sent straight to you every day!

Parameters:
  TableName:
    Type: String
    Default: ai-fitness    
  ContactEmail:
    Type: String
    Description: Email address to send workout emails to
  GoogleClientId:
    Type: String
    Description: Client id for SSO with Google
  GoogleClientSecret:
    Type: String
    Description: Client secret for SSO with Google  
  HostedZoneId:
    Type: String
    Description: Id of the hosted zone for the root domain
  RootDomainName:
    Type: String
    Description: BaseUrl or root domain name for custom domains
    Default: readysetcloud.io

Globals:
  Function:
    Runtime: nodejs18.x
    Architectures:
      - arm64
    Tracing: Active
    Timeout: 15
    MemorySize: 1024
    Handler: index.handler
    Layers:
      - !Ref SharedLayer
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

Resources:
  FitnessTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      BillingMode: PAY_PER_REQUEST      
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: IsScheduledInFuture
          AttributeType: S
        - AttributeName: ScheduledDate
          AttributeType: S
        - AttributeName: facet
          AttributeType: S
        - AttributeName: facetSortKey
          AttributeType: S
      GlobalSecondaryIndexes:        
        - IndexName: FutureSchedule
          KeySchema:
            - AttributeName: IsScheduledInFuture
              KeyType: HASH
            - AttributeName: ScheduledDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: facets
          KeySchema:
            - AttributeName: facet
              KeyType: HASH
            - AttributeName: facetSortKey
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: nodejs18.x
      BuildArchitecture: arm64
    Properties:
      ContentUri: layers/
      CompatibleRuntimes:
        - nodejs18.x

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: FitnessUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
  
  AuthCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub auth.${RootDomainName}
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub auth.${RootDomainName}
          HostedZoneId: !Ref HostedZoneId

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: !Sub auth.${RootDomainName}
      CustomDomainConfig:
        CertificateArn: !Ref AuthCertificate

  CustomDomainDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub auth.${RootDomainName}
      ResourceRecords:
        - !GetAtt CognitoUserPoolDomain.CloudFrontDistribution
      TTL: 300
      Type: CNAME

  CognitoUserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ProviderName: Google
      ProviderType: Google
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: "email openid profile"
      AttributeMapping:
        email: 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'
        given_name: 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname'
        family_name: 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname'

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: AIFitnessUserPoolClient
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - http://localhost:3000
        - http://localhost:3000/oauth2/idpresponse
        - !Sub https://fitness.${RootDomainName}
        - !Sub https://fitness.${RootDomainName}/oauth2/idpresponse
        - !Sub https://auth.${RootDomainName}
        - !Sub https://auth.${RootDomainName}/oauth2/idpresponse
      LogoutURLs:
        - http://localhost:3000/logout
        - !Sub https://fitness.${RootDomainName}/logout
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - Google
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: AIFitnessIdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !Sub cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}

  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Federated: 'cognito-identity.amazonaws.com'
          Action: 'sts:AssumeRoleWithWebIdentity'
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
            'ForAnyValue:StringLike':
              'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
      - PolicyName: CognitoAuthorizedPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: 
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
            Resource: 
              - !Sub arn:aws:s3:::${AiFitnessUserFilesBucket}/*
          - Effect: Allow
            Action: 
              - appsync:GraphQL
            Resource: 
              - !Ref FitnessGQL

  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn

  CreateProfilePostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/create-profile-post-confirmation
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Events:
        Cognito:
          Type: Cognito
          Properties:
            Trigger: PostConfirmation
            UserPool: !Ref CognitoUserPool
          
  AiFitnessUserFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: ['GET', 'PUT', 'POST', 'DELETE']
            AllowedOrigins: ['*']

  FitnessGQL:
    Type: AWS::Serverless::GraphQLApi
    Properties:
      SchemaUri: schemas/schema.graphql
      Auth:
        Type: AMAZON_COGNITO_USER_POOLS
        UserPool:
          UserPoolId: !Ref CognitoUserPool
          DefaultAction: ALLOW
          AwsRegion: !Ref AWS::Region
      CustomDomainName:
        CertificateArn: !Ref GraphQLCertificate
        DomainName: !Sub graphql.${RootDomainName}
      XrayEnabled: true
      DataSources:
        DynamoDb:
          WorkoutDataSource:
            TableName: !Ref TableName
            TableArn: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
      Functions:       
        getWorkout:
          Runtime:
            Name: APPSYNC_JS
            Version: 1.0.0
          DataSource: WorkoutDataSource
          CodeUri: ./resolvers/getWorkout.js
        updateProfile:
          Runtime:
            Name: APPSYNC_JS
            Version: 1.0.0
          DataSource: WorkoutDataSource
          CodeUri: ./resolvers/updateProfile.js
        updateSettings:
          Runtime:
            Name: APPSYNC_JS
            Version: 1.0.0
          DataSource: WorkoutDataSource
          CodeUri: ./resolvers/updateSettings.js
        getProfile:
          Runtime:
            Name: APPSYNC_JS
            Version: 1.0.0
          DataSource: WorkoutDataSource
          CodeUri: ./resolvers/getProfile.js
        getSettings:
          Runtime:
            Name: APPSYNC_JS
            Version: 1.0.0
          DataSource: WorkoutDataSource
          CodeUri: ./resolvers/getSettings.js
      Resolvers:
        Query:
          getUserWorkout:
            Runtime:
              Name: APPSYNC_JS
              Version: 1.0.0
            Pipeline:
              - getWorkout
          getMyProfile:
            Runtime:
              Name: APPSYNC_JS
              Version: 1.0.0
            Pipeline:
              - getProfile
          getMySettings:
            Runtime:
              Name: APPSYNC_JS
              Version: 1.0.0
            Pipeline:
              - getSettings
        Mutation:
          updateProfile:
            Runtime:
              Name: APPSYNC_JS
              Version: 1.0.0
            Pipeline:
              - updateProfile
          updateSettings:
            Runtime:
              Name: APPSYNC_JS
              Version: 1.0.0
            Pipeline:
              - updateSettings

  GraphQLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub graphql.${RootDomainName}
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub graphql.${RootDomainName}
          HostedZoneId: !Ref HostedZoneId
 
  # GQLCustomDomainDnsRecord:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneId: !Ref HostedZoneId
  #     Name: !Sub graphql.${RootDomainName}
  #     ResourceRecords:
  #       - !GetAtt CognitoUserPoolDomain.CloudFrontDistribution
  #     TTL: 300
  #     Type: A

  GenerateWeeklyScheduleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/generate-weekly-schedule
      Policies:
        - AWSLambdaBasicExecutionRole

  GetUserWorkoutPromptsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-user-workout-prompts
      Policies:
        - AWSLambdaBasicExecutionRole
  
  FormatWorkoutEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/format-workout-email
      Policies:
        - AWSLambdaBasicExecutionRole        

  BuildWeeklyWorkoutsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: workflows/build-weekly-workouts.asl.json
      DefinitionSubstitutions:
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        DynamodbPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        GenerateWeeklyScheduleFunction: !GetAtt GenerateWeeklyScheduleFunction.Arn
        TableName: !Ref TableName   
        AdminEmail: !Ref ContactEmail
        AskChatGPTFunction: "{{resolve:ssm:/serverless-toolbox/ask-chatgpt}}"
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:putItem
              Resource:
                - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt GenerateWeeklyScheduleFunction.Arn
                - "{{resolve:ssm:/serverless-toolbox/ask-chatgpt}}"
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource:
                - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
      Events:
        Trigger:
          Type: Schedule
          Properties:
            Schedule: "cron(0 19 ? * SUN *)"

  SendWorkoutEmailStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      DefinitionUri: workflows/send-workout-email.asl.json
      DefinitionSubstitutions:
        DynamodbQuery: !Sub arn:${AWS::Partition}:states:::aws-sdk:dynamodb:query
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        DynamodbUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        FormatEmailFunction: !GetAtt FormatWorkoutEmailFunction.Arn
        TableName: !Ref TableName
        AdminEmail: !Ref ContactEmail
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:updateItem
              Resource:
                - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}/index/FutureSchedule
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt FormatWorkoutEmailFunction.Arn
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource:
                - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: "*"
      Events:
        Trigger:
          Type: Schedule
          Properties:
            Schedule: "cron(59 23 ? * SUN-THU *)"
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt SendWorkoutEmailLogGroup.Arn

  SendWorkoutEmailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  WorkoutApi:
    Type: AWS::Serverless::Api
    Properties:
      TracingEnabled: true
      StageName: dev
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openapi.yaml

  GetWorkoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-workout
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref WorkoutApi
            Path: /workouts
            Method: GET

  BuildWorkoutNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/build-workout-notification
      Policies:
        - AWSLambdaBasicExecutionRole

  SaveToDynamoDBFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/save-to-ddb
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName

  UnmarshallItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/unmarshall-item
      Policies:
        - AWSLambdaBasicExecutionRole

  AIFitnessScheduleGroup:
    Type: AWS::Scheduler::ScheduleGroup
    Properties:
      Name: aifitness

  SendWorkoutNotificationStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      DefinitionUri: workflows/send-workout-notification.asl.json
      DefinitionSubstitutions:
        DynamoDbGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        UnmarshallItem: !GetAtt UnmarshallItemFunction.Arn
        BuildWorkoutNotification: !GetAtt BuildWorkoutNotificationFunction.Arn
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        DeleteSchedule: !Sub arn:${AWS::Partition}:states:::aws-sdk:scheduler:deleteSchedule
        TableName: !Ref TableName
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt UnmarshallItemFunction.Arn
                - !GetAtt BuildWorkoutNotificationFunction.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action: scheduler:DeleteSchedule
              Resource: !Sub arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/aifitness/WORKOUT*
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: "*"
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt NotificationLogGroup.Arn
  
  NotificationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  GenerateUserWorkoutsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: workflows/generate-user-workouts.asl.json
      DefinitionSubstitutions:
        DynamoDbQuery: !Sub arn:${AWS::Partition}:states:::aws-sdk:dynamodb:query
        DynamoDbGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        GetUserWorkoutPrompts: !GetAtt GetUserWorkoutPromptsFunction.Arn
        AskChatGPT: "{{resolve:ssm:/serverless-toolbox/ask-chatgpt}}"
        SendWorkoutNotification: !Ref SendWorkoutNotificationStateMachine
        SendWorkoutNotificationRole: !GetAtt SendNotificationSchedulerRole.Arn
        SchedulerCreateSchedule: !Sub arn:${AWS::Partition}:states:::aws-sdk:scheduler:createSchedule
        SaveToDynamoDB: !GetAtt SaveToDynamoDBFunction.Arn
        TableName: !Ref TableName
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}/index/facets
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt GetUserWorkoutPromptsFunction.Arn
                - "{{resolve:ssm:/serverless-toolbox/ask-chatgpt}}"
                - !GetAtt SaveToDynamoDBFunction.Arn
            - Effect: Allow
              Action: iam:PassRole
              Resource: !GetAtt SendNotificationSchedulerRole.Arn
            - Effect: Allow
              Action: scheduler:CreateSchedule
              Resource: !Sub arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/aifitness/WORKOUT*
      Events:
        Trigger:
          Type: Schedule
          Properties:
            Schedule: "cron(0 17 ? * SUN *)"

  SendNotificationSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow 
            Principal:
              Service: 
                - scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SendNotificationSchedulerPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !GetAtt SendWorkoutNotificationStateMachine.Arn

Outputs:
  UserPoolClientId:
    Description: Id of user pool client
    Value: !Ref CognitoUserPoolClient
  IdentityPoolId:
    Description: Id of the identity pool
    Value: !Ref CognitoIdentityPool
  UserPoolId:
    Description: Id of the user pool
    Value: !Ref CognitoUserPool
  AppSyncEndpoint:
    Description: Endpoint for the graphql Api
    Value: !Ref FitnessGQL