AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Use ChatGPT to generate your workouts and have them sent straight to you every day!

Parameters:
  TableName:
    Type: String
    Default: ai-fitness    
  ContactEmail:
    Type: String
    Description: Email address to send workout emails to
    
Globals:
  Function:
    Runtime: nodejs18.x
    Architectures:
      - arm64
    Tracing: Active
    Timeout: 15
    MemorySize: 1024
    Handler: index.handler
    Layers:
      - !Ref SharedLayer
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

Resources:
  FitnessTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      BillingMode: PAY_PER_REQUEST      
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: IsScheduledInFuture
          AttributeType: S
        - AttributeName: ScheduledDate
          AttributeType: S
        - AttributeName: facet
          AttributeType: S
        - AttributeName: facetSortKey
          AttributeType: S
      GlobalSecondaryIndexes:        
        - IndexName: FutureSchedule
          KeySchema:
            - AttributeName: IsScheduledInFuture
              KeyType: HASH
            - AttributeName: ScheduledDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: facets
          KeySchema:
            - AttributeName: facet
              KeyType: HASH
            - AttributeName: facetSortKey
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: nodejs18.x
      BuildArchitecture: arm64
    Properties:
      ContentUri: layers/
      CompatibleRuntimes:
        - nodejs18.x

  GenerateWeeklyScheduleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/generate-weekly-schedule
      Policies:
        - AWSLambdaBasicExecutionRole

  GetUserWorkoutPromptsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-user-workout-prompts
      Policies:
        - AWSLambdaBasicExecutionRole
  
  FormatWorkoutEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/format-workout-email
      Policies:
        - AWSLambdaBasicExecutionRole        

  BuildWeeklyWorkoutsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: workflows/build-weekly-workouts.asl.json
      DefinitionSubstitutions:
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        DynamodbPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        GenerateWeeklyScheduleFunction: !GetAtt GenerateWeeklyScheduleFunction.Arn
        TableName: !Ref TableName   
        AdminEmail: !Ref ContactEmail
        AskChatGPTFunction: "{{resolve:ssm:/serverless-toolbox/ask-chatgpt}}"
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:putItem
              Resource:
                - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt GenerateWeeklyScheduleFunction.Arn
                - "{{resolve:ssm:/serverless-toolbox/ask-chatgpt}}"
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource:
                - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
      Events:
        Trigger:
          Type: Schedule
          Properties:
            Schedule: "cron(0 19 ? * SUN *)"

  SendWorkoutEmailStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      DefinitionUri: workflows/send-workout-email.asl.json
      DefinitionSubstitutions:
        DynamodbQuery: !Sub arn:${AWS::Partition}:states:::aws-sdk:dynamodb:query
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        DynamodbUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        FormatEmailFunction: !GetAtt FormatWorkoutEmailFunction.Arn
        TableName: !Ref TableName
        AdminEmail: !Ref ContactEmail
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:updateItem
              Resource:
                - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}/index/FutureSchedule
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt FormatWorkoutEmailFunction.Arn
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource:
                - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: "*"
      Events:
        Trigger:
          Type: Schedule
          Properties:
            Schedule: "cron(59 23 ? * SUN-THU *)"
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt SendWorkoutEmailLogGroup.Arn

  SendWorkoutEmailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  WorkoutApi:
    Type: AWS::Serverless::Api
    Properties:
      TracingEnabled: true
      StageName: dev
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openapi.yaml

  GetWorkoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-workout
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref WorkoutApi
            Path: /workouts
            Method: GET

  BuildWorkoutNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/build-workout-notification
      Policies:
        - AWSLambdaBasicExecutionRole

  SaveToDynamoDBFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/save-to-ddb
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName

  UnmarshallItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/unmarshall-item
      Policies:
        - AWSLambdaBasicExecutionRole

  AIFitnessScheduleGroup:
    Type: AWS::Scheduler::ScheduleGroup
    Properties:
      Name: aifitness

  SendWorkoutNotificationStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      DefinitionUri: workflows/send-workout-notification.asl.json
      DefinitionSubstitutions:
        DynamoDbGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        UnmarshallItem: !GetAtt UnmarshallItemFunction.Arn
        BuildWorkoutNotification: !GetAtt BuildWorkoutNotificationFunction.Arn
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        DeleteSchedule: !Sub arn:${AWS::Partition}:states:::aws-sdk:scheduler:deleteSchedule
        TableName: !Ref TableName
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt UnmarshallItemFunction.Arn
                - !GetAtt BuildWorkoutNotificationFunction.Arn
            - Effect: Allow
              Action: events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
            - Effect: Allow
              Action: scheduler:DeleteSchedule
              Resource: !Sub arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/aifitness/WORKOUT*
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: "*"
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt NotificationLogGroup.Arn
  
  NotificationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  GenerateUserWorkoutsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: workflows/generate-user-workouts.asl.json
      DefinitionSubstitutions:
        DynamoDbQuery: !Sub arn:${AWS::Partition}:states:::aws-sdk:dynamodb:query
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        GetUserWorkoutPrompts: !GetAtt GetUserWorkoutPromptsFunction.Arn
        AskChatGPT: "{{resolve:ssm:/serverless-toolbox/ask-chatgpt}}"
        SendWorkoutNotification: !Ref SendWorkoutNotificationStateMachine
        SendWorkoutNotificationRole: !GetAtt SendNotificationSchedulerRole.Arn
        SchedulerCreateSchedule: !Sub arn:${AWS::Partition}:states:::aws-sdk:scheduler:createSchedule
        SaveToDynamoDB: !GetAtt SaveToDynamoDBFunction.Arn
        TableName: !Ref TableName
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}/index/facets
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource:
                - !GetAtt GetUserWorkoutPromptsFunction.Arn
                - "{{resolve:ssm:/serverless-toolbox/ask-chatgpt}}"
                - !GetAtt SaveToDynamoDBFunction.Arn
            - Effect: Allow
              Action: iam:PassRole
              Resource: !GetAtt SendNotificationSchedulerRole.Arn
            - Effect: Allow
              Action: scheduler:CreateSchedule
              Resource: !Sub arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/aifitness/WORKOUT*
      Events:
        Trigger:
          Type: Schedule
          Properties:
            Schedule: "cron(0 17 ? * SUN *)"

  SendNotificationSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow 
            Principal:
              Service: 
                - scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SendNotificationSchedulerPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: states:StartSyncExecution
                Resource: !GetAtt SendWorkoutNotificationStateMachine.Arn