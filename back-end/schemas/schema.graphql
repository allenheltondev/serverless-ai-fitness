schema {
  query: Query
  mutation: Mutation
}

type Query {
  getWorkoutByDate(date: String!): Workout
  getUserWorkout(date: String!): Workout
  getWorkoutList(date: String!): WorkoutRange
  getWorkoutArchive(muscleGroup: String!, nextToken: String): PaginatedWorkouts
  getWorkoutById(id: String!): Workout
  getMyProfile: Profile
  getMySettings: Settings
  isUserConfigured: Boolean
  getExerciseDefinition(exercise: String!): ExerciseDefinition
}

type Mutation {
  updateProfile(input: ProfileInput!): Boolean
  updateSettings(input: SettingsInput!): Boolean
}

type PaginatedWorkouts {
  nextToken: String
  workouts: [PaginatedWorkout]
}

type PaginatedWorkout {
  id: String
  muscleGroup: String
  equipment: String
  estimatedTime: Int
  type: String
  rating: Int
  difficulty: String
}

type Exercise {
  name: String!
  description: String
  numReps: Int
  duration: Int
}

type Set {
  numReps: Int
  exercises: [Exercise!]!
  duration: Int
}

type MainSet {
  numSets: Int!
  setType: String!
  sets: [Set!]!
}

type WarmupExercise {
  name: String!
  numReps: Int!
}

type Warmup {
  exercises: [WarmupExercise!]!
}

type AbsExercise {
  name: String!
  numReps: Int!
}

type Abs {
  numSets: Int!
  exercises: [AbsExercise!]!
}

type WorkoutRange {
  workouts: [WorkoutSummary]
}

type WorkoutSummary {
  muscleGroup: String
  equipment: String
  date: String
  workoutType: String
}

type Workout {
  workout: WorkoutDetail
  muscleGroup: String
  equipment: String
  date: String
  workoutType: String
  type: String
}

type WorkoutDetail {
  mainSet: MainSet!
  warmup: Warmup!
  abs: Abs!
}

input EquipmentInput {
  type: String!
  threshold: Float!
}

input SpecialWorkoutsInput {
  days: [String!]!
  percentChance: Int!
  equipment: [String!]!
  objective: String!
}

input WorkoutTypeInput {
  type: String!
  modifier: String
}

input SettingsInput {
  equipment: [EquipmentInput!]
  muscleGroups: [String!]
  frequency: [String]
  workoutTypes: [WorkoutTypeInput!]
  targetTime: Int!
  specialWorkouts: SpecialWorkoutsInput
}

input ProfileInput {
  contact: ContactInput
  demographics: DemographicsInput
  objective: String
  experienceLevel: String
}

input ContactInput {
  type: String!
  time: String
  timezone: String
  email: String
}

input DemographicsInput {
  firstName: String
  lastName: String
  username: String
  dob: String
  sex: String
  weight: Int
}

type Settings {
  equipment: [Equipment!]
  muscleGroups: [String!]
  frequency: [String]
  workoutTypes: [WorkoutType!]
  targetTime: Int
  specialWorkouts: SpecialWorkouts
}

type Equipment {
  type: String!
  threshold: Float!
}

type SpecialWorkouts {
  days: [String!]!
  percentChance: Int!
  equipment: [String!]!
  objective: String!
}

type WorkoutType {
  type: String!
  modifier: String
}

type Profile {
  contact: Contact
  demographics: Demographics
  objective: String
  experienceLevel: String
}

type Contact {
  type: String!
  time: String
  timezone: String
  email: String
}

type Demographics {
  firstName: String
  lastName: String
  username: String
  dob: String
  sex: String
  weight: Int
}

type UserEquipment {
  type: String!
  threshold: Float!
}

type UserWorkoutType {
  type: String!
  modifier: String
}

type UserSpecialWorkouts {
  days: [String!]!
  percentChance: Int!
  equipment: [String!]!
  objective: String!
}

input ExerciseDefinitionInput {
  exercise: String!
}

type ExerciseDefinition {
  name: String!
  muscleGroup: String!
  description: String!
}
